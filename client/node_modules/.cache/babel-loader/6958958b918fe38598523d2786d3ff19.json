{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jeroenvervaeck/Desktop/WebOfThings/WoT-RaspberryPi-Tutorial/client/src/App/components/Sparks/index.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport * as THREE from 'three';\nimport React, { useRef, useMemo } from 'react';\nimport { extend, useFrame, useThree } from 'react-three-fiber';\nimport lerp from 'lerp';\nimport * as meshline from 'threejs-meshline';\nextend(meshline);\n\nconst r = () => Math.max(0.2, Math.random());\n\nfunction Fatline({\n  curve,\n  width,\n  color,\n  speed\n}) {\n  _s();\n\n  const material = useRef();\n  useFrame(() => material.current.uniforms.dashOffset.value -= speed);\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    children: [/*#__PURE__*/_jsxDEV(\"meshLine\", {\n      attach: \"geometry\",\n      vertices: curve\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshLineMaterial\", {\n      attach: \"material\",\n      ref: material,\n      transparent: true,\n      depthTest: false,\n      lineWidth: width,\n      color: color,\n      dashArray: 0.1,\n      dashRatio: 0.95\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Fatline, \"gbLAKoFLni0JhxVZtBUE06R4M0U=\", false, function () {\n  return [useFrame];\n});\n\n_c = Fatline;\nexport default function Sparks({\n  mouse,\n  count,\n  colors,\n  radius = 1\n}) {\n  _s2();\n\n  const lines = useMemo(() => new Array(count).fill().map((_, index) => {\n    const pos = new THREE.Vector3(Math.sin(0) * radius * r(), Math.cos(0) * radius * r(), 0);\n    const points = new Array(30).fill().map((_, index) => {\n      const angle = index / 20 * Math.PI * 2;\n      return pos.add(new THREE.Vector3(Math.sin(angle) * radius * r(), Math.cos(angle) * radius * r(), 0)).clone();\n    });\n    const curve = new THREE.CatmullRomCurve3(points).getPoints(1000);\n    return {\n      color: colors[parseInt(colors.length * Math.random())],\n      width: Math.max(0.1, 0.2 * index / 10),\n      speed: Math.max(0.001, 0.004 * Math.random()),\n      curve\n    };\n  }), [count]);\n  const ref = useRef();\n  const {\n    size,\n    viewport\n  } = useThree();\n  const aspect = size.width / viewport.width;\n  const speed = 0.001;\n  useFrame(({\n    clock\n  }) => {\n    if (ref.current) {\n      ref.current.rotation.x = lerp(ref.current.rotation.x, 0 + mouse.current[1] / aspect / 200, 0.1);\n      ref.current.rotation.y = lerp(ref.current.rotation.y, 0 + mouse.current[0] / aspect / 400, 0.1);\n      ref.current.rotation.x += speed * Math.sin(clock.getElapsedTime());\n      ref.current.rotation.y += speed * Math.sin(clock.getElapsedTime());\n      ref.current.position.x += speed * Math.sin(clock.getElapsedTime());\n      ref.current.position.z += speed * Math.sin(clock.getElapsedTime());\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: ref,\n    children: /*#__PURE__*/_jsxDEV(\"group\", {\n      position: [-radius * 2, radius, -10],\n      scale: [1, 1.3, 1],\n      children: lines.map((props, index) => /*#__PURE__*/_jsxDEV(Fatline, { ...props\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Sparks, \"80Y9pG42hacQrwqO4CazaVN5rbg=\", false, function () {\n  return [useThree, useFrame];\n});\n\n_c2 = Sparks;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Fatline\");\n$RefreshReg$(_c2, \"Sparks\");","map":{"version":3,"sources":["/Users/jeroenvervaeck/Desktop/WebOfThings/WoT-RaspberryPi-Tutorial/client/src/App/components/Sparks/index.js"],"names":["THREE","React","useRef","useMemo","extend","useFrame","useThree","lerp","meshline","r","Math","max","random","Fatline","curve","width","color","speed","material","current","uniforms","dashOffset","value","Sparks","mouse","count","colors","radius","lines","Array","fill","map","_","index","pos","Vector3","sin","cos","points","angle","PI","add","clone","CatmullRomCurve3","getPoints","parseInt","length","ref","size","viewport","aspect","clock","rotation","x","y","getElapsedTime","position","z","props"],"mappings":"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","sourcesContent":["import * as THREE from 'three'\nimport React, { useRef, useMemo } from 'react'\nimport { extend, useFrame, useThree } from 'react-three-fiber'\nimport lerp from 'lerp'\nimport * as meshline from 'threejs-meshline'\n\nextend(meshline)\n\nconst r = () => Math.max(0.2, Math.random())\n\nfunction Fatline({ curve, width, color, speed }) {\n  const material = useRef()\n  useFrame(() => (material.current.uniforms.dashOffset.value -= speed))\n  return (\n    <mesh>\n      <meshLine attach=\"geometry\" vertices={curve} />\n      <meshLineMaterial attach=\"material\" ref={material} transparent depthTest={false} lineWidth={width} color={color} dashArray={0.1} dashRatio={0.95} />\n    </mesh>\n  )\n}\n\nexport default function Sparks({ mouse, count, colors, radius = 1 }) {\n  const lines = useMemo(\n    () =>\n      new Array(count).fill().map((_, index) => {\n        const pos = new THREE.Vector3(Math.sin(0) * radius * r(), Math.cos(0) * radius * r(), 0)\n        const points = new Array(30).fill().map((_, index) => {\n          const angle = (index / 20) * Math.PI * 2\n          return pos.add(new THREE.Vector3(Math.sin(angle) * radius * r(), Math.cos(angle) * radius * r(), 0)).clone()\n        })\n        const curve = new THREE.CatmullRomCurve3(points).getPoints(1000)\n        return {\n          color: colors[parseInt(colors.length * Math.random())],\n          width: Math.max(0.1, (0.2 * index) / 10),\n          speed: Math.max(0.001, 0.004 * Math.random()),\n          curve\n        }\n      }),\n    [count]\n  )\n\n  const ref = useRef()\n  const { size, viewport } = useThree()\n  const aspect = size.width / viewport.width\n  const speed = 0.001\n  useFrame(({clock}) => {\n    if (ref.current) {\n      ref.current.rotation.x = lerp(ref.current.rotation.x, 0 + mouse.current[1] / aspect / 200, 0.1)\n\t  ref.current.rotation.y = lerp(ref.current.rotation.y, 0 + mouse.current[0] / aspect / 400, 0.1)\n\t  ref.current.rotation.x += speed * Math.sin(clock.getElapsedTime())\n\t  ref.current.rotation.y += speed * Math.sin(clock.getElapsedTime())\n\t  ref.current.position.x += speed * Math.sin(clock.getElapsedTime())\n\t  ref.current.position.z += speed * Math.sin(clock.getElapsedTime())\n    }\n  })\n\n  return (\n    <group ref={ref}>\n      <group position={[-radius * 2, radius, -10]} scale={[1, 1.3, 1]}>\n        {lines.map((props, index) => (\n          <Fatline key={index} {...props} />\n        ))}\n      </group>\n    </group>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}