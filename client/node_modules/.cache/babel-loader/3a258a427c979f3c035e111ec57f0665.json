{"ast":null,"code":";\n(function () {\n  'use strict';\n\n  var root = this;\n  var has_require = typeof require !== 'undefined';\n\n  var THREE = root.THREE || has_require && require('three');\n\n  if (!THREE) throw new Error('MeshLine requires three.js');\n\n  function MeshLine() {\n    THREE.BufferGeometry.call(this);\n    this.type = 'MeshLine';\n    this.positions = [];\n    this.previous = [];\n    this.next = [];\n    this.side = [];\n    this.width = [];\n    this.indices_array = [];\n    this.uvs = [];\n    this.counters = [];\n    this._vertices = [];\n    this._bufferArray = [];\n    this.widthCallback = null; // Used to raycast\n\n    this.matrixWorld = new THREE.Matrix4(); // to support previous api\n\n    Object.defineProperties(this, {\n      geometry: {\n        enumerable: true,\n        get: function () {\n          return this;\n        },\n        set: function (value) {\n          this.setFromGeometry(value);\n        }\n      },\n      vertices: {\n        enumerable: true,\n        get: function () {\n          return this._vertices;\n        },\n        set: function (value) {\n          this.setVertices(value);\n        }\n      },\n      bufferArray: {\n        enumerable: true,\n        get: function () {\n          return this._bufferArray;\n        },\n        set: function (value) {\n          this.setBufferArray(value);\n        }\n      }\n    });\n  }\n\n  MeshLine.prototype = Object.create(THREE.BufferGeometry.prototype);\n  MeshLine.prototype.constructor = MeshLine;\n  MeshLine.prototype.isMeshLine = true;\n\n  MeshLine.prototype.setMatrixWorld = function (matrixWorld) {\n    this.matrixWorld = matrixWorld;\n  };\n\n  MeshLine.prototype.setFromGeometry = function (g, c) {\n    if (g instanceof THREE.Geometry) {\n      this.setVertices(g.vertices, c);\n    }\n\n    if (g instanceof THREE.BufferGeometry) {\n      this.setBufferArray(g.getAttribute('position').array, c);\n    }\n\n    if (g instanceof Float32Array || g instanceof Array) {\n      // to support previous api\n      this.setBufferArray(g, c);\n    }\n  }; // to support previous api\n\n\n  MeshLine.prototype.setGeometry = function (g, c) {\n    this.setFromGeometry(g, c);\n  };\n\n  MeshLine.prototype.setVertices = function (vts, wcb) {\n    this._vertices = vts;\n    this.widthCallback = wcb || this.widthCallback;\n    this.positions = [];\n    this.counters = [];\n\n    for (var j = 0; j < vts.length; j++) {\n      var v = vts[j];\n      var c = j / vts.length;\n      this.positions.push(v.x, v.y, v.z);\n      this.positions.push(v.x, v.y, v.z);\n      this.counters.push(c);\n      this.counters.push(c);\n    }\n\n    this.process();\n  };\n\n  MeshLine.prototype.setBufferArray = function (ba, wcb) {\n    this._bufferArray = ba;\n    this.widthCallback = wcb || this.widthCallback;\n    this.positions = [];\n    this.counters = [];\n\n    for (var j = 0; j < ba.length; j += 3) {\n      var c = j / ba.length;\n      this.positions.push(ba[j], ba[j + 1], ba[j + 2]);\n      this.positions.push(ba[j], ba[j + 1], ba[j + 2]);\n      this.counters.push(c);\n      this.counters.push(c);\n    }\n\n    this.process();\n  };\n\n  function MeshLineRaycast(raycaster, intersects) {\n    var inverseMatrix = new THREE.Matrix4();\n    var ray = new THREE.Ray();\n    var sphere = new THREE.Sphere();\n    var interRay = new THREE.Vector3();\n    var geometry = this.geometry; // Checking boundingSphere distance to ray\n\n    sphere.copy(geometry.boundingSphere);\n    sphere.applyMatrix4(this.matrixWorld);\n\n    if (raycaster.ray.intersectSphere(sphere, interRay) === false) {\n      return;\n    }\n\n    inverseMatrix.getInverse(this.matrixWorld);\n    ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);\n    var vStart = new THREE.Vector3();\n    var vEnd = new THREE.Vector3();\n    var interSegment = new THREE.Vector3();\n    var step = this instanceof THREE.LineSegments ? 2 : 1;\n    var index = geometry.index;\n    var attributes = geometry.attributes;\n\n    if (index !== null) {\n      var indices = index.array;\n      var positions = attributes.position.array;\n      var widths = attributes.width.array;\n\n      for (var i = 0, l = indices.length - 1; i < l; i += step) {\n        var a = indices[i];\n        var b = indices[i + 1];\n        vStart.fromArray(positions, a * 3);\n        vEnd.fromArray(positions, b * 3);\n        var width = widths[Math.floor(i / 3)] != undefined ? widths[Math.floor(i / 3)] : 1;\n        var precision = raycaster.params.Line.threshold + this.material.lineWidth * width / 2;\n        var precisionSq = precision * precision;\n        var distSq = ray.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n        if (distSq > precisionSq) continue;\n        interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n        var distance = raycaster.ray.origin.distanceTo(interRay);\n        if (distance < raycaster.near || distance > raycaster.far) continue;\n        intersects.push({\n          distance: distance,\n          // What do we want? intersection point on the ray or on the segment??\n          // point: raycaster.ray.at( distance ),\n          point: interSegment.clone().applyMatrix4(this.matrixWorld),\n          index: i,\n          face: null,\n          faceIndex: null,\n          object: this\n        }); // make event only fire once\n\n        i = l;\n      }\n    }\n  }\n\n  MeshLine.prototype.raycast = MeshLineRaycast;\n\n  MeshLine.prototype.compareV3 = function (a, b) {\n    var aa = a * 6;\n    var ab = b * 6;\n    return this.positions[aa] === this.positions[ab] && this.positions[aa + 1] === this.positions[ab + 1] && this.positions[aa + 2] === this.positions[ab + 2];\n  };\n\n  MeshLine.prototype.copyV3 = function (a) {\n    var aa = a * 6;\n    return [this.positions[aa], this.positions[aa + 1], this.positions[aa + 2]];\n  };\n\n  MeshLine.prototype.process = function () {\n    var l = this.positions.length / 6;\n    this.previous = [];\n    this.next = [];\n    this.side = [];\n    this.width = [];\n    this.indices_array = [];\n    this.uvs = [];\n    var w;\n    var v; // initial previous points\n\n    if (this.compareV3(0, l - 1)) {\n      v = this.copyV3(l - 2);\n    } else {\n      v = this.copyV3(0);\n    }\n\n    this.previous.push(v[0], v[1], v[2]);\n    this.previous.push(v[0], v[1], v[2]);\n\n    for (var j = 0; j < l; j++) {\n      // sides\n      this.side.push(1);\n      this.side.push(-1); // widths\n\n      if (this.widthCallback) w = this.widthCallback(j / (l - 1));else w = 1;\n      this.width.push(w);\n      this.width.push(w); // uvs\n\n      this.uvs.push(j / (l - 1), 0);\n      this.uvs.push(j / (l - 1), 1);\n\n      if (j < l - 1) {\n        // points previous to poisitions\n        v = this.copyV3(j);\n        this.previous.push(v[0], v[1], v[2]);\n        this.previous.push(v[0], v[1], v[2]); // indices\n\n        var n = j * 2;\n        this.indices_array.push(n, n + 1, n + 2);\n        this.indices_array.push(n + 2, n + 1, n + 3);\n      }\n\n      if (j > 0) {\n        // points after poisitions\n        v = this.copyV3(j);\n        this.next.push(v[0], v[1], v[2]);\n        this.next.push(v[0], v[1], v[2]);\n      }\n    } // last next point\n\n\n    if (this.compareV3(l - 1, 0)) {\n      v = this.copyV3(1);\n    } else {\n      v = this.copyV3(l - 1);\n    }\n\n    this.next.push(v[0], v[1], v[2]);\n    this.next.push(v[0], v[1], v[2]); // redefining the attribute seems to prevent range errors \n    // if the user sets a differing number of vertices\n\n    if (!this._attributes || this._attributes.position.count !== this.positions.length) {\n      this._attributes = {\n        position: new THREE.BufferAttribute(new Float32Array(this.positions), 3),\n        previous: new THREE.BufferAttribute(new Float32Array(this.previous), 3),\n        next: new THREE.BufferAttribute(new Float32Array(this.next), 3),\n        side: new THREE.BufferAttribute(new Float32Array(this.side), 1),\n        width: new THREE.BufferAttribute(new Float32Array(this.width), 1),\n        uv: new THREE.BufferAttribute(new Float32Array(this.uvs), 2),\n        index: new THREE.BufferAttribute(new Uint16Array(this.indices_array), 1),\n        counters: new THREE.BufferAttribute(new Float32Array(this.counters), 1)\n      };\n    } else {\n      this._attributes.position.copyArray(new Float32Array(this.positions));\n\n      this._attributes.position.needsUpdate = true;\n\n      this._attributes.previous.copyArray(new Float32Array(this.previous));\n\n      this._attributes.previous.needsUpdate = true;\n\n      this._attributes.next.copyArray(new Float32Array(this.next));\n\n      this._attributes.next.needsUpdate = true;\n\n      this._attributes.side.copyArray(new Float32Array(this.side));\n\n      this._attributes.side.needsUpdate = true;\n\n      this._attributes.width.copyArray(new Float32Array(this.width));\n\n      this._attributes.width.needsUpdate = true;\n\n      this._attributes.uv.copyArray(new Float32Array(this.uvs));\n\n      this._attributes.uv.needsUpdate = true;\n\n      this._attributes.index.copyArray(new Uint16Array(this.indices_array));\n\n      this._attributes.index.needsUpdate = true;\n    }\n\n    this.setAttribute('position', this._attributes.position);\n    this.setAttribute('previous', this._attributes.previous);\n    this.setAttribute('next', this._attributes.next);\n    this.setAttribute('side', this._attributes.side);\n    this.setAttribute('width', this._attributes.width);\n    this.setAttribute('uv', this._attributes.uv);\n    this.setAttribute('counters', this._attributes.counters);\n    this.setIndex(this._attributes.index);\n    this.computeBoundingSphere();\n    this.computeBoundingBox();\n  };\n\n  function memcpy(src, srcOffset, dst, dstOffset, length) {\n    var i;\n    src = src.subarray || src.slice ? src : src.buffer;\n    dst = dst.subarray || dst.slice ? dst : dst.buffer;\n    src = srcOffset ? src.subarray ? src.subarray(srcOffset, length && srcOffset + length) : src.slice(srcOffset, length && srcOffset + length) : src;\n\n    if (dst.set) {\n      dst.set(src, dstOffset);\n    } else {\n      for (i = 0; i < src.length; i++) {\n        dst[i + dstOffset] = src[i];\n      }\n    }\n\n    return dst;\n  }\n  /**\n   * Fast method to advance the line by one position.  The oldest position is removed.\n   * @param position\n   */\n\n\n  MeshLine.prototype.advance = function (position) {\n    var positions = this._attributes.position.array;\n    var previous = this._attributes.previous.array;\n    var next = this._attributes.next.array;\n    var l = positions.length; // PREVIOUS\n\n    memcpy(positions, 0, previous, 0, l); // POSITIONS\n\n    memcpy(positions, 6, positions, 0, l - 6);\n    positions[l - 6] = position.x;\n    positions[l - 5] = position.y;\n    positions[l - 4] = position.z;\n    positions[l - 3] = position.x;\n    positions[l - 2] = position.y;\n    positions[l - 1] = position.z; // NEXT\n\n    memcpy(positions, 6, next, 0, l - 6);\n    next[l - 6] = position.x;\n    next[l - 5] = position.y;\n    next[l - 4] = position.z;\n    next[l - 3] = position.x;\n    next[l - 2] = position.y;\n    next[l - 1] = position.z;\n    this._attributes.position.needsUpdate = true;\n    this._attributes.previous.needsUpdate = true;\n    this._attributes.next.needsUpdate = true;\n  };\n\n  THREE.ShaderChunk['meshline_vert'] = ['', THREE.ShaderChunk.logdepthbuf_pars_vertex, THREE.ShaderChunk.fog_pars_vertex, '', 'attribute vec3 previous;', 'attribute vec3 next;', 'attribute float side;', 'attribute float width;', 'attribute float counters;', '', 'uniform vec2 resolution;', 'uniform float lineWidth;', 'uniform vec3 color;', 'uniform float opacity;', 'uniform float sizeAttenuation;', '', 'varying vec2 vUV;', 'varying vec4 vColor;', 'varying float vCounters;', '', 'vec2 fix( vec4 i, float aspect ) {', '', '    vec2 res = i.xy / i.w;', '    res.x *= aspect;', '\t vCounters = counters;', '    return res;', '', '}', '', 'void main() {', '', '    float aspect = resolution.x / resolution.y;', '', '    vColor = vec4( color, opacity );', '    vUV = uv;', '', '    mat4 m = projectionMatrix * modelViewMatrix;', '    vec4 finalPosition = m * vec4( position, 1.0 );', '    vec4 prevPos = m * vec4( previous, 1.0 );', '    vec4 nextPos = m * vec4( next, 1.0 );', '', '    vec2 currentP = fix( finalPosition, aspect );', '    vec2 prevP = fix( prevPos, aspect );', '    vec2 nextP = fix( nextPos, aspect );', '', '    float w = lineWidth * width;', '', '    vec2 dir;', '    if( nextP == currentP ) dir = normalize( currentP - prevP );', '    else if( prevP == currentP ) dir = normalize( nextP - currentP );', '    else {', '        vec2 dir1 = normalize( currentP - prevP );', '        vec2 dir2 = normalize( nextP - currentP );', '        dir = normalize( dir1 + dir2 );', '', '        vec2 perp = vec2( -dir1.y, dir1.x );', '        vec2 miter = vec2( -dir.y, dir.x );', '        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );', '', '    }', '', '    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;', '    vec4 normal = vec4( -dir.y, dir.x, 0., 1. );', '    normal.xy *= .5 * w;', '    normal *= projectionMatrix;', '    if( sizeAttenuation == 0. ) {', '        normal.xy *= finalPosition.w;', '        normal.xy /= ( vec4( resolution, 0., 1. ) * projectionMatrix ).xy;', '    }', '', '    finalPosition.xy += normal.xy * side;', '', '    gl_Position = finalPosition;', '', THREE.ShaderChunk.logdepthbuf_vertex, THREE.ShaderChunk.fog_vertex && '    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );', THREE.ShaderChunk.fog_vertex, '}'].join('\\n');\n  THREE.ShaderChunk['meshline_frag'] = ['', THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.logdepthbuf_pars_fragment, '', 'uniform sampler2D map;', 'uniform sampler2D alphaMap;', 'uniform float useMap;', 'uniform float useAlphaMap;', 'uniform float useDash;', 'uniform float dashArray;', 'uniform float dashOffset;', 'uniform float dashRatio;', 'uniform float visibility;', 'uniform float alphaTest;', 'uniform vec2 repeat;', '', 'varying vec2 vUV;', 'varying vec4 vColor;', 'varying float vCounters;', '', 'void main() {', '', THREE.ShaderChunk.logdepthbuf_fragment, '', '    vec4 c = vColor;', '    if( useMap == 1. ) c *= texture2D( map, vUV * repeat );', '    if( useAlphaMap == 1. ) c.a *= texture2D( alphaMap, vUV * repeat ).a;', '    if( c.a < alphaTest ) discard;', '    if( useDash == 1. ){', '        c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));', '    }', '    gl_FragColor = c;', '    gl_FragColor.a *= step(vCounters, visibility);', '', THREE.ShaderChunk.fog_fragment, '}'].join('\\n');\n\n  function MeshLineMaterial(parameters) {\n    THREE.ShaderMaterial.call(this, {\n      uniforms: Object.assign({}, THREE.UniformsLib.fog, {\n        lineWidth: {\n          value: 1\n        },\n        map: {\n          value: null\n        },\n        useMap: {\n          value: 0\n        },\n        alphaMap: {\n          value: null\n        },\n        useAlphaMap: {\n          value: 0\n        },\n        color: {\n          value: new THREE.Color(0xffffff)\n        },\n        opacity: {\n          value: 1\n        },\n        resolution: {\n          value: new THREE.Vector2(1, 1)\n        },\n        sizeAttenuation: {\n          value: 1\n        },\n        dashArray: {\n          value: 0\n        },\n        dashOffset: {\n          value: 0\n        },\n        dashRatio: {\n          value: 0.5\n        },\n        useDash: {\n          value: 0\n        },\n        visibility: {\n          value: 1\n        },\n        alphaTest: {\n          value: 0\n        },\n        repeat: {\n          value: new THREE.Vector2(1, 1)\n        }\n      }),\n      vertexShader: THREE.ShaderChunk.meshline_vert,\n      fragmentShader: THREE.ShaderChunk.meshline_frag\n    });\n    this.type = 'MeshLineMaterial';\n    Object.defineProperties(this, {\n      lineWidth: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.lineWidth.value;\n        },\n        set: function (value) {\n          this.uniforms.lineWidth.value = value;\n        }\n      },\n      map: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.map.value;\n        },\n        set: function (value) {\n          this.uniforms.map.value = value;\n        }\n      },\n      useMap: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.useMap.value;\n        },\n        set: function (value) {\n          this.uniforms.useMap.value = value;\n        }\n      },\n      alphaMap: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.alphaMap.value;\n        },\n        set: function (value) {\n          this.uniforms.alphaMap.value = value;\n        }\n      },\n      useAlphaMap: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.useAlphaMap.value;\n        },\n        set: function (value) {\n          this.uniforms.useAlphaMap.value = value;\n        }\n      },\n      color: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.color.value;\n        },\n        set: function (value) {\n          this.uniforms.color.value = value;\n        }\n      },\n      opacity: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.opacity.value;\n        },\n        set: function (value) {\n          this.uniforms.opacity.value = value;\n        }\n      },\n      resolution: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.resolution.value;\n        },\n        set: function (value) {\n          this.uniforms.resolution.value.copy(value);\n        }\n      },\n      sizeAttenuation: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.sizeAttenuation.value;\n        },\n        set: function (value) {\n          this.uniforms.sizeAttenuation.value = value;\n        }\n      },\n      dashArray: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.dashArray.value;\n        },\n        set: function (value) {\n          this.uniforms.dashArray.value = value;\n          this.useDash = value !== 0 ? 1 : 0;\n        }\n      },\n      dashOffset: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.dashOffset.value;\n        },\n        set: function (value) {\n          this.uniforms.dashOffset.value = value;\n        }\n      },\n      dashRatio: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.dashRatio.value;\n        },\n        set: function (value) {\n          this.uniforms.dashRatio.value = value;\n        }\n      },\n      useDash: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.useDash.value;\n        },\n        set: function (value) {\n          this.uniforms.useDash.value = value;\n        }\n      },\n      visibility: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.visibility.value;\n        },\n        set: function (value) {\n          this.uniforms.visibility.value = value;\n        }\n      },\n      alphaTest: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.alphaTest.value;\n        },\n        set: function (value) {\n          this.uniforms.alphaTest.value = value;\n        }\n      },\n      repeat: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.repeat.value;\n        },\n        set: function (value) {\n          this.uniforms.repeat.value.copy(value);\n        }\n      }\n    });\n    this.setValues(parameters);\n  }\n\n  MeshLineMaterial.prototype = Object.create(THREE.ShaderMaterial.prototype);\n  MeshLineMaterial.prototype.constructor = MeshLineMaterial;\n  MeshLineMaterial.prototype.isMeshLineMaterial = true;\n\n  MeshLineMaterial.prototype.copy = function (source) {\n    THREE.ShaderMaterial.prototype.copy.call(this, source);\n    this.lineWidth = source.lineWidth;\n    this.map = source.map;\n    this.useMap = source.useMap;\n    this.alphaMap = source.alphaMap;\n    this.useAlphaMap = source.useAlphaMap;\n    this.color.copy(source.color);\n    this.opacity = source.opacity;\n    this.resolution.copy(source.resolution);\n    this.sizeAttenuation = source.sizeAttenuation;\n    this.dashArray.copy(source.dashArray);\n    this.dashOffset.copy(source.dashOffset);\n    this.dashRatio.copy(source.dashRatio);\n    this.useDash = source.useDash;\n    this.visibility = source.visibility;\n    this.alphaTest = source.alphaTest;\n    this.repeat.copy(source.repeat);\n    return this;\n  };\n\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = {\n        MeshLine: MeshLine,\n        MeshLineMaterial: MeshLineMaterial,\n        MeshLineRaycast: MeshLineRaycast\n      };\n    }\n\n    exports.MeshLine = MeshLine;\n    exports.MeshLineMaterial = MeshLineMaterial;\n    exports.MeshLineRaycast = MeshLineRaycast;\n  } else {\n    root.MeshLine = MeshLine;\n    root.MeshLineMaterial = MeshLineMaterial;\n    root.MeshLineRaycast = MeshLineRaycast;\n  }\n}).call(this);","map":{"version":3,"sources":["/Users/jeroenvervaeck/Desktop/WebOfThings/WoT-RaspberryPi-Tutorial/client/node_modules/threejs-meshline/src/index.js"],"names":["root","has_require","require","THREE","Error","MeshLine","BufferGeometry","call","type","positions","previous","next","side","width","indices_array","uvs","counters","_vertices","_bufferArray","widthCallback","matrixWorld","Matrix4","Object","defineProperties","geometry","enumerable","get","set","value","setFromGeometry","vertices","setVertices","bufferArray","setBufferArray","prototype","create","constructor","isMeshLine","setMatrixWorld","g","c","Geometry","getAttribute","array","Float32Array","Array","setGeometry","vts","wcb","j","length","v","push","x","y","z","process","ba","MeshLineRaycast","raycaster","intersects","inverseMatrix","ray","Ray","sphere","Sphere","interRay","Vector3","copy","boundingSphere","applyMatrix4","intersectSphere","getInverse","vStart","vEnd","interSegment","step","LineSegments","index","attributes","indices","position","widths","i","l","a","b","fromArray","Math","floor","undefined","precision","params","Line","threshold","material","lineWidth","precisionSq","distSq","distanceSqToSegment","distance","origin","distanceTo","near","far","point","clone","face","faceIndex","object","raycast","compareV3","aa","ab","copyV3","w","n","_attributes","count","BufferAttribute","uv","Uint16Array","copyArray","needsUpdate","setAttribute","setIndex","computeBoundingSphere","computeBoundingBox","memcpy","src","srcOffset","dst","dstOffset","subarray","slice","buffer","advance","ShaderChunk","logdepthbuf_pars_vertex","fog_pars_vertex","logdepthbuf_vertex","fog_vertex","join","fog_pars_fragment","logdepthbuf_pars_fragment","logdepthbuf_fragment","fog_fragment","MeshLineMaterial","parameters","ShaderMaterial","uniforms","assign","UniformsLib","fog","map","useMap","alphaMap","useAlphaMap","color","Color","opacity","resolution","Vector2","sizeAttenuation","dashArray","dashOffset","dashRatio","useDash","visibility","alphaTest","repeat","vertexShader","meshline_vert","fragmentShader","meshline_frag","setValues","isMeshLineMaterial","source","exports","module"],"mappings":"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","sourcesContent":[";(function() {\n  'use strict'\n\n  var root = this\n\n  var has_require = typeof require !== 'undefined'\n\n  var THREE = root.THREE || (has_require && require('three'))\n  if (!THREE) throw new Error('MeshLine requires three.js')\n\n  function MeshLine() {\n    THREE.BufferGeometry.call(this)\n    this.type = 'MeshLine'\n\n    this.positions = []\n\n    this.previous = []\n    this.next = []\n    this.side = []\n    this.width = []\n    this.indices_array = []\n    this.uvs = []\n    this.counters = []\n    this._vertices = []\n    this._bufferArray = []\n\n    this.widthCallback = null\n\n    // Used to raycast\n    this.matrixWorld = new THREE.Matrix4()\n\n    // to support previous api\n    Object.defineProperties(this, {\n      geometry: {\n        enumerable: true,\n        get: function() {\n          return this\n        },\n        set: function(value) {\n          this.setFromGeometry(value)\n        },\n      },\n      vertices: {\n        enumerable: true,\n        get: function() {\n          return this._vertices\n        },\n        set: function(value) {\n          this.setVertices(value)\n        },\n      },\n      bufferArray: {\n        enumerable: true,\n        get: function() {\n          return this._bufferArray\n        },\n        set: function(value) {\n          this.setBufferArray(value)\n        },\n      },\n    })\n  }\n\n  MeshLine.prototype = Object.create(THREE.BufferGeometry.prototype)\n  MeshLine.prototype.constructor = MeshLine\n  MeshLine.prototype.isMeshLine = true\n\n  MeshLine.prototype.setMatrixWorld = function(matrixWorld) {\n    this.matrixWorld = matrixWorld\n  }\n\n  MeshLine.prototype.setFromGeometry = function(g, c) {\n    if (g instanceof THREE.Geometry) {\n      this.setVertices(g.vertices, c)\n    }\n    if (g instanceof THREE.BufferGeometry) {\n      this.setBufferArray(g.getAttribute('position').array, c)\n    }\n    if (g instanceof Float32Array || g instanceof Array) {\n      // to support previous api\n      this.setBufferArray(g, c)\n    }\n  }\n\n  // to support previous api\n  MeshLine.prototype.setGeometry = function(g, c) {\n    this.setFromGeometry(g, c)\n  }\n\n  MeshLine.prototype.setVertices = function(vts, wcb) {\n    this._vertices = vts\n    this.widthCallback = wcb || this.widthCallback\n    this.positions = []\n    this.counters = []\n    for (var j = 0; j < vts.length; j++) {\n      var v = vts[j]\n      var c = j / vts.length\n      this.positions.push(v.x, v.y, v.z)\n      this.positions.push(v.x, v.y, v.z)\n      this.counters.push(c)\n      this.counters.push(c)\n    }\n    this.process()\n  }\n\n  MeshLine.prototype.setBufferArray = function(ba, wcb) {\n    this._bufferArray = ba\n    this.widthCallback = wcb || this.widthCallback\n    this.positions = []\n    this.counters = []\n    for (var j = 0; j < ba.length; j += 3) {\n      var c = j / ba.length\n      this.positions.push(ba[j], ba[j + 1], ba[j + 2])\n      this.positions.push(ba[j], ba[j + 1], ba[j + 2])\n      this.counters.push(c)\n      this.counters.push(c)\n    }\n    this.process()\n  }\n\n  function MeshLineRaycast(raycaster, intersects) {\n    var inverseMatrix = new THREE.Matrix4()\n    var ray = new THREE.Ray()\n    var sphere = new THREE.Sphere()\n    var interRay = new THREE.Vector3()\n    var geometry = this.geometry\n    // Checking boundingSphere distance to ray\n\n    sphere.copy(geometry.boundingSphere)\n    sphere.applyMatrix4(this.matrixWorld)\n\n    if (raycaster.ray.intersectSphere(sphere, interRay) === false) {\n      return\n    }\n\n    inverseMatrix.getInverse(this.matrixWorld)\n    ray.copy(raycaster.ray).applyMatrix4(inverseMatrix)\n\n    var vStart = new THREE.Vector3()\n    var vEnd = new THREE.Vector3()\n    var interSegment = new THREE.Vector3()\n    var step = this instanceof THREE.LineSegments ? 2 : 1\n    var index = geometry.index\n    var attributes = geometry.attributes\n\n    if (index !== null) {\n      var indices = index.array\n      var positions = attributes.position.array\n      var widths = attributes.width.array\n\n      for (var i = 0, l = indices.length - 1; i < l; i += step) {\n        var a = indices[i]\n        var b = indices[i + 1]\n\n        vStart.fromArray(positions, a * 3)\n        vEnd.fromArray(positions, b * 3)\n        var width = widths[Math.floor(i / 3)] != undefined ? widths[Math.floor(i / 3)] : 1\n        var precision = raycaster.params.Line.threshold + (this.material.lineWidth * width) / 2\n        var precisionSq = precision * precision\n\n        var distSq = ray.distanceSqToSegment(vStart, vEnd, interRay, interSegment)\n\n        if (distSq > precisionSq) continue\n\n        interRay.applyMatrix4(this.matrixWorld) //Move back to world space for distance calculation\n\n        var distance = raycaster.ray.origin.distanceTo(interRay)\n\n        if (distance < raycaster.near || distance > raycaster.far) continue\n\n        intersects.push({\n          distance: distance,\n          // What do we want? intersection point on the ray or on the segment??\n          // point: raycaster.ray.at( distance ),\n          point: interSegment.clone().applyMatrix4(this.matrixWorld),\n          index: i,\n          face: null,\n          faceIndex: null,\n          object: this,\n        })\n        // make event only fire once\n        i = l\n      }\n    }\n  }\n  MeshLine.prototype.raycast = MeshLineRaycast\n  MeshLine.prototype.compareV3 = function(a, b) {\n    var aa = a * 6\n    var ab = b * 6\n    return (\n      this.positions[aa] === this.positions[ab] &&\n      this.positions[aa + 1] === this.positions[ab + 1] &&\n      this.positions[aa + 2] === this.positions[ab + 2]\n    )\n  }\n\n  MeshLine.prototype.copyV3 = function(a) {\n    var aa = a * 6\n    return [this.positions[aa], this.positions[aa + 1], this.positions[aa + 2]]\n  }\n\n  MeshLine.prototype.process = function() {\n    var l = this.positions.length / 6\n\n    this.previous = []\n    this.next = []\n    this.side = []\n    this.width = []\n    this.indices_array = []\n    this.uvs = []\n\n    var w\n\n    var v\n    // initial previous points\n    if (this.compareV3(0, l - 1)) {\n      v = this.copyV3(l - 2)\n    } else {\n      v = this.copyV3(0)\n    }\n    this.previous.push(v[0], v[1], v[2])\n    this.previous.push(v[0], v[1], v[2])\n\n    for (var j = 0; j < l; j++) {\n      // sides\n      this.side.push(1)\n      this.side.push(-1)\n\n      // widths\n      if (this.widthCallback) w = this.widthCallback(j / (l - 1))\n      else w = 1\n      this.width.push(w)\n      this.width.push(w)\n\n      // uvs\n      this.uvs.push(j / (l - 1), 0)\n      this.uvs.push(j / (l - 1), 1)\n\n      if (j < l - 1) {\n        // points previous to poisitions\n        v = this.copyV3(j)\n        this.previous.push(v[0], v[1], v[2])\n        this.previous.push(v[0], v[1], v[2])\n\n        // indices\n        var n = j * 2\n        this.indices_array.push(n, n + 1, n + 2)\n        this.indices_array.push(n + 2, n + 1, n + 3)\n      }\n      if (j > 0) {\n        // points after poisitions\n        v = this.copyV3(j)\n        this.next.push(v[0], v[1], v[2])\n        this.next.push(v[0], v[1], v[2])\n      }\n    }\n\n    // last next point\n    if (this.compareV3(l - 1, 0)) {\n      v = this.copyV3(1)\n    } else {\n      v = this.copyV3(l - 1)\n    }\n    this.next.push(v[0], v[1], v[2])\n    this.next.push(v[0], v[1], v[2])\n\n    // redefining the attribute seems to prevent range errors \n    // if the user sets a differing number of vertices\n    if (!this._attributes || this._attributes.position.count !== this.positions.length) {\n      this._attributes = {\n        position: new THREE.BufferAttribute(new Float32Array(this.positions), 3),\n        previous: new THREE.BufferAttribute(new Float32Array(this.previous), 3),\n        next: new THREE.BufferAttribute(new Float32Array(this.next), 3),\n        side: new THREE.BufferAttribute(new Float32Array(this.side), 1),\n        width: new THREE.BufferAttribute(new Float32Array(this.width), 1),\n        uv: new THREE.BufferAttribute(new Float32Array(this.uvs), 2),\n        index: new THREE.BufferAttribute(new Uint16Array(this.indices_array), 1),\n        counters: new THREE.BufferAttribute(new Float32Array(this.counters), 1),\n      }\n    } else {\n      this._attributes.position.copyArray(new Float32Array(this.positions))\n      this._attributes.position.needsUpdate = true\n      this._attributes.previous.copyArray(new Float32Array(this.previous))\n      this._attributes.previous.needsUpdate = true\n      this._attributes.next.copyArray(new Float32Array(this.next))\n      this._attributes.next.needsUpdate = true\n      this._attributes.side.copyArray(new Float32Array(this.side))\n      this._attributes.side.needsUpdate = true\n      this._attributes.width.copyArray(new Float32Array(this.width))\n      this._attributes.width.needsUpdate = true\n      this._attributes.uv.copyArray(new Float32Array(this.uvs))\n      this._attributes.uv.needsUpdate = true\n      this._attributes.index.copyArray(new Uint16Array(this.indices_array))\n      this._attributes.index.needsUpdate = true\n    }\n\n    this.setAttribute('position', this._attributes.position)\n    this.setAttribute('previous', this._attributes.previous)\n    this.setAttribute('next', this._attributes.next)\n    this.setAttribute('side', this._attributes.side)\n    this.setAttribute('width', this._attributes.width)\n    this.setAttribute('uv', this._attributes.uv)\n    this.setAttribute('counters', this._attributes.counters)\n\n    this.setIndex(this._attributes.index)\n\n    this.computeBoundingSphere()\n    this.computeBoundingBox()\n  }\n\n  function memcpy(src, srcOffset, dst, dstOffset, length) {\n    var i\n\n    src = src.subarray || src.slice ? src : src.buffer\n    dst = dst.subarray || dst.slice ? dst : dst.buffer\n\n    src = srcOffset\n      ? src.subarray\n        ? src.subarray(srcOffset, length && srcOffset + length)\n        : src.slice(srcOffset, length && srcOffset + length)\n      : src\n\n    if (dst.set) {\n      dst.set(src, dstOffset)\n    } else {\n      for (i = 0; i < src.length; i++) {\n        dst[i + dstOffset] = src[i]\n      }\n    }\n\n    return dst\n  }\n\n  /**\n   * Fast method to advance the line by one position.  The oldest position is removed.\n   * @param position\n   */\n  MeshLine.prototype.advance = function(position) {\n    var positions = this._attributes.position.array\n    var previous = this._attributes.previous.array\n    var next = this._attributes.next.array\n    var l = positions.length\n\n    // PREVIOUS\n    memcpy(positions, 0, previous, 0, l)\n\n    // POSITIONS\n    memcpy(positions, 6, positions, 0, l - 6)\n\n    positions[l - 6] = position.x\n    positions[l - 5] = position.y\n    positions[l - 4] = position.z\n    positions[l - 3] = position.x\n    positions[l - 2] = position.y\n    positions[l - 1] = position.z\n\n    // NEXT\n    memcpy(positions, 6, next, 0, l - 6)\n\n    next[l - 6] = position.x\n    next[l - 5] = position.y\n    next[l - 4] = position.z\n    next[l - 3] = position.x\n    next[l - 2] = position.y\n    next[l - 1] = position.z\n\n    this._attributes.position.needsUpdate = true\n    this._attributes.previous.needsUpdate = true\n    this._attributes.next.needsUpdate = true\n  }\n\n  THREE.ShaderChunk['meshline_vert'] = [\n    '',\n    THREE.ShaderChunk.logdepthbuf_pars_vertex,\n    THREE.ShaderChunk.fog_pars_vertex,\n    '',\n    'attribute vec3 previous;',\n    'attribute vec3 next;',\n    'attribute float side;',\n    'attribute float width;',\n    'attribute float counters;',\n    '',\n    'uniform vec2 resolution;',\n    'uniform float lineWidth;',\n    'uniform vec3 color;',\n    'uniform float opacity;',\n    'uniform float sizeAttenuation;',\n    '',\n    'varying vec2 vUV;',\n    'varying vec4 vColor;',\n    'varying float vCounters;',\n    '',\n    'vec2 fix( vec4 i, float aspect ) {',\n    '',\n    '    vec2 res = i.xy / i.w;',\n    '    res.x *= aspect;',\n    '\t vCounters = counters;',\n    '    return res;',\n    '',\n    '}',\n    '',\n    'void main() {',\n    '',\n    '    float aspect = resolution.x / resolution.y;',\n    '',\n    '    vColor = vec4( color, opacity );',\n    '    vUV = uv;',\n    '',\n    '    mat4 m = projectionMatrix * modelViewMatrix;',\n    '    vec4 finalPosition = m * vec4( position, 1.0 );',\n    '    vec4 prevPos = m * vec4( previous, 1.0 );',\n    '    vec4 nextPos = m * vec4( next, 1.0 );',\n    '',\n    '    vec2 currentP = fix( finalPosition, aspect );',\n    '    vec2 prevP = fix( prevPos, aspect );',\n    '    vec2 nextP = fix( nextPos, aspect );',\n    '',\n    '    float w = lineWidth * width;',\n    '',\n    '    vec2 dir;',\n    '    if( nextP == currentP ) dir = normalize( currentP - prevP );',\n    '    else if( prevP == currentP ) dir = normalize( nextP - currentP );',\n    '    else {',\n    '        vec2 dir1 = normalize( currentP - prevP );',\n    '        vec2 dir2 = normalize( nextP - currentP );',\n    '        dir = normalize( dir1 + dir2 );',\n    '',\n    '        vec2 perp = vec2( -dir1.y, dir1.x );',\n    '        vec2 miter = vec2( -dir.y, dir.x );',\n    '        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );',\n    '',\n    '    }',\n    '',\n    '    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;',\n    '    vec4 normal = vec4( -dir.y, dir.x, 0., 1. );',\n    '    normal.xy *= .5 * w;',\n    '    normal *= projectionMatrix;',\n    '    if( sizeAttenuation == 0. ) {',\n    '        normal.xy *= finalPosition.w;',\n    '        normal.xy /= ( vec4( resolution, 0., 1. ) * projectionMatrix ).xy;',\n    '    }',\n    '',\n    '    finalPosition.xy += normal.xy * side;',\n    '',\n    '    gl_Position = finalPosition;',\n    '',\n    THREE.ShaderChunk.logdepthbuf_vertex,\n    THREE.ShaderChunk.fog_vertex && '    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\n    THREE.ShaderChunk.fog_vertex,\n    '}',\n  ].join('\\n')\n\n  THREE.ShaderChunk['meshline_frag'] = [\n    '',\n    THREE.ShaderChunk.fog_pars_fragment,\n    THREE.ShaderChunk.logdepthbuf_pars_fragment,\n    '',\n    'uniform sampler2D map;',\n    'uniform sampler2D alphaMap;',\n    'uniform float useMap;',\n    'uniform float useAlphaMap;',\n    'uniform float useDash;',\n    'uniform float dashArray;',\n    'uniform float dashOffset;',\n    'uniform float dashRatio;',\n    'uniform float visibility;',\n    'uniform float alphaTest;',\n    'uniform vec2 repeat;',\n    '',\n    'varying vec2 vUV;',\n    'varying vec4 vColor;',\n    'varying float vCounters;',\n    '',\n    'void main() {',\n    '',\n    THREE.ShaderChunk.logdepthbuf_fragment,\n    '',\n    '    vec4 c = vColor;',\n    '    if( useMap == 1. ) c *= texture2D( map, vUV * repeat );',\n    '    if( useAlphaMap == 1. ) c.a *= texture2D( alphaMap, vUV * repeat ).a;',\n    '    if( c.a < alphaTest ) discard;',\n    '    if( useDash == 1. ){',\n    '        c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));',\n    '    }',\n    '    gl_FragColor = c;',\n    '    gl_FragColor.a *= step(vCounters, visibility);',\n    '',\n    THREE.ShaderChunk.fog_fragment,\n    '}',\n  ].join('\\n')\n\n  function MeshLineMaterial(parameters) {\n    THREE.ShaderMaterial.call(this, {\n      uniforms: Object.assign({}, THREE.UniformsLib.fog, {\n        lineWidth: { value: 1 },\n        map: { value: null },\n        useMap: { value: 0 },\n        alphaMap: { value: null },\n        useAlphaMap: { value: 0 },\n        color: { value: new THREE.Color(0xffffff) },\n        opacity: { value: 1 },\n        resolution: { value: new THREE.Vector2(1, 1) },\n        sizeAttenuation: { value: 1 },\n        dashArray: { value: 0 },\n        dashOffset: { value: 0 },\n        dashRatio: { value: 0.5 },\n        useDash: { value: 0 },\n        visibility: { value: 1 },\n        alphaTest: { value: 0 },\n        repeat: { value: new THREE.Vector2(1, 1) },\n      }),\n\n      vertexShader: THREE.ShaderChunk.meshline_vert,\n\n      fragmentShader: THREE.ShaderChunk.meshline_frag,\n    })\n\n    this.type = 'MeshLineMaterial'\n\n    Object.defineProperties(this, {\n      lineWidth: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.lineWidth.value\n        },\n        set: function(value) {\n          this.uniforms.lineWidth.value = value\n        },\n      },\n      map: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.map.value\n        },\n        set: function(value) {\n          this.uniforms.map.value = value\n        },\n      },\n      useMap: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.useMap.value\n        },\n        set: function(value) {\n          this.uniforms.useMap.value = value\n        },\n      },\n      alphaMap: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.alphaMap.value\n        },\n        set: function(value) {\n          this.uniforms.alphaMap.value = value\n        },\n      },\n      useAlphaMap: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.useAlphaMap.value\n        },\n        set: function(value) {\n          this.uniforms.useAlphaMap.value = value\n        },\n      },\n      color: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.color.value\n        },\n        set: function(value) {\n          this.uniforms.color.value = value\n        },\n      },\n      opacity: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.opacity.value\n        },\n        set: function(value) {\n          this.uniforms.opacity.value = value\n        },\n      },\n      resolution: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.resolution.value\n        },\n        set: function(value) {\n          this.uniforms.resolution.value.copy(value)\n        },\n      },\n      sizeAttenuation: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.sizeAttenuation.value\n        },\n        set: function(value) {\n          this.uniforms.sizeAttenuation.value = value\n        },\n      },\n      dashArray: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.dashArray.value\n        },\n        set: function(value) {\n          this.uniforms.dashArray.value = value\n          this.useDash = value !== 0 ? 1 : 0\n        },\n      },\n      dashOffset: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.dashOffset.value\n        },\n        set: function(value) {\n          this.uniforms.dashOffset.value = value\n        },\n      },\n      dashRatio: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.dashRatio.value\n        },\n        set: function(value) {\n          this.uniforms.dashRatio.value = value\n        },\n      },\n      useDash: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.useDash.value\n        },\n        set: function(value) {\n          this.uniforms.useDash.value = value\n        },\n      },\n      visibility: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.visibility.value\n        },\n        set: function(value) {\n          this.uniforms.visibility.value = value\n        },\n      },\n      alphaTest: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.alphaTest.value\n        },\n        set: function(value) {\n          this.uniforms.alphaTest.value = value\n        },\n      },\n      repeat: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.repeat.value\n        },\n        set: function(value) {\n          this.uniforms.repeat.value.copy(value)\n        },\n      },\n    })\n\n    this.setValues(parameters)\n  }\n\n  MeshLineMaterial.prototype = Object.create(THREE.ShaderMaterial.prototype)\n  MeshLineMaterial.prototype.constructor = MeshLineMaterial\n  MeshLineMaterial.prototype.isMeshLineMaterial = true\n\n  MeshLineMaterial.prototype.copy = function(source) {\n    THREE.ShaderMaterial.prototype.copy.call(this, source)\n\n    this.lineWidth = source.lineWidth\n    this.map = source.map\n    this.useMap = source.useMap\n    this.alphaMap = source.alphaMap\n    this.useAlphaMap = source.useAlphaMap\n    this.color.copy(source.color)\n    this.opacity = source.opacity\n    this.resolution.copy(source.resolution)\n    this.sizeAttenuation = source.sizeAttenuation\n    this.dashArray.copy(source.dashArray)\n    this.dashOffset.copy(source.dashOffset)\n    this.dashRatio.copy(source.dashRatio)\n    this.useDash = source.useDash\n    this.visibility = source.visibility\n    this.alphaTest = source.alphaTest\n    this.repeat.copy(source.repeat)\n\n    return this\n  }\n\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = {\n        MeshLine: MeshLine,\n        MeshLineMaterial: MeshLineMaterial,\n        MeshLineRaycast: MeshLineRaycast,\n      }\n    }\n    exports.MeshLine = MeshLine\n    exports.MeshLineMaterial = MeshLineMaterial\n    exports.MeshLineRaycast = MeshLineRaycast\n  } else {\n    root.MeshLine = MeshLine\n    root.MeshLineMaterial = MeshLineMaterial\n    root.MeshLineRaycast = MeshLineRaycast\n  }\n}.call(this))\n"]},"metadata":{},"sourceType":"script"}